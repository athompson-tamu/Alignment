import subprocess, time, sys, os
from ShiftCSCGeometry_Fn import *

# Inputs
Curr_geo = "74X_dataRun2_Prompt_v0_AlignmentRcd" #no .xml here
Tag_newGeo = "_moveglobal2"
f = "data_CSC-1100-110001_SingleMuon_Run2015B-PromptReco-v1_RECO_7_4_6_patch3_pt20_v1_GlobalPosNoShift_01/data_CSC-1100-110001_SingleMuon_Run2015B-PromptReco-v1_RECO_7_4_6_patch3_pt20_v1_GlobalPosNoShift_01_plotting.root"

# First get your current geometry and make a copy
print 'Copying ' + Curr_geo + '.xml  -> ' + Curr_geo + Tag_newGeo + '.xml'
copyGeo = subprocess.Popen(['cp ' + Curr_geo + '.xml ' + Curr_geo + Tag_newGeo + '.xml'], stdout=subprocess.PIPE, shell=True);
copyGeo.communicate()

# Then Get the values for the shift

# Then edit your corrected geometry at the right line (last line -1)
num_lines = sum(1 for line in open(Curr_geo + Tag_newGeo + '.xml'))
print Curr_geo + '.xml has ' + str(num_lines) + ' lines'
temp = open('temp', 'wb')
nLine =0
corr_1_1_1 = get_Corr(f,"p","+","1","1")
corr_1_1_2 = get_Corr(f,"p","+","1","2")
corr_1_1_3 = get_Corr(f,"p","+","1","3")
corr_1_1_4 = corr_1_1_1
corr_1_2_1 = get_Corr(f,"p","+","2","1")
corr_1_2_2 = get_Corr(f,"p","+","2","2")
corr_1_3_1 = get_Corr(f,"p","+","3","1")
corr_1_3_2 = get_Corr(f,"p","+","3","2")
corr_1_4_1 = get_Corr(f,"p","+","4","1")
corr_1_4_2 = get_Corr(f,"p","+","4","2")
corr_2_1_1 = get_Corr(f,"m","-","1","1")
corr_2_1_2 = get_Corr(f,"m","-","1","2")
corr_2_1_3 = get_Corr(f,"m","-","1","3")
corr_2_1_4 = corr_2_1_1
corr_2_2_1 = get_Corr(f,"m","-","2","1")
corr_2_2_2 = get_Corr(f,"m","-","2","2")
corr_2_3_1 = get_Corr(f,"m","-","3","1")
corr_2_3_2 = get_Corr(f,"m","-","3","2")
corr_2_4_1 = get_Corr(f,"m","-","4","1")
corr_2_4_2 = get_Corr(f,"m","-","4","2")

with open(Curr_geo + Tag_newGeo + '.xml', 'r') as f:
    for line in f:
        nLine+=1
        if ( nLine==num_lines-1 ):
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="1" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_1_1[0]) + '" y="' + str(corr_1_1_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="1" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_1_2[0]) + '" y="' + str(corr_1_1_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="1" ring="3" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_1_3[0]) + '" y="' + str(corr_1_1_3[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="1" ring="4" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_1_4[0]) + '" y="' + str(corr_1_1_4[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="2" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_2_1[0]) + '" y="' + str(corr_1_2_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="2" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_2_2[0]) + '" y="' + str(corr_1_2_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="3" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_3_1[0]) + '" y="' + str(corr_1_3_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="3" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_3_2[0]) + '" y="' + str(corr_1_3_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="4" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_4_1[0]) + '" y="' + str(corr_1_4_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="1" station="4" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_1_4_2[0]) + '" y="' + str(corr_1_4_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="1" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_1_1[0]) + '" y="' + str(corr_2_1_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="1" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_1_2[0]) + '" y="' + str(corr_2_1_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="1" ring="3" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_1_3[0]) + '" y="' + str(corr_2_1_3[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="1" ring="4" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_1_4[0]) + '" y="' + str(corr_2_1_4[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="2" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_2_1[0]) + '" y="' + str(corr_2_2_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="2" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_2_2[0]) + '" y="' + str(corr_2_2_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="3" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_3_1[0]) + '" y="' + str(corr_2_3_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="3" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_3_2[0]) + '" y="' + str(corr_2_3_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="4" ring="1" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_4_1[0]) + '" y="' + str(corr_2_4_1[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
            temp.write('\n')
            temp.write('<operation>\n')
            temp.write('  <CSCRing endcap="2" station="4" ring="2" />\n')
            temp.write('  <moveglobal x="' + str(corr_2_4_2[0]) + '" y="' + str(corr_2_4_2[1]) + '" z="0" />\n')
            temp.write('</operation>\n')
        temp.write(line)
temp.close()
MvTmp = subprocess.Popen(['mv temp ' + Curr_geo + Tag_newGeo + '.xml'], stdout=subprocess.PIPE, shell=True);
MvTmp.communicate()
print 'New geometry file ' + Curr_geo + Tag_newGeo + '.xml has been written' 

print 'To convert the XML to DB, please do "CmsRun CSCshift_convertXMLtoSQLite_cfg.py"'
convertXMLtoSQLite = open( "CSCshift_convertXMLtoSQLite_cfg.py", 'w' )
writeXML_DB_Converter(convertXMLtoSQLite,"74X_dataRun2_Prompt_v0_AlignmentRcd_moveglobal.xml","74X_dataRun2_Prompt_v0_AlignmentRcd_CSCRingAlignment.db","GPR_July24_2015_Run2015B_74X_dataRun2_Prompt_v0_Tk150715_dL4_iter1.db","IdealGeometry" )
